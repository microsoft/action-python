name: 'Python Actions Collection'
description: 'Run actions for Python Project on pull requests to improve code review experience.'
author: 'dciborow'
inputs:
  # Python Project Configuration is expected to be in a pyproject.toml
  root:
    description: |
      Project root directory.
      Default '.'
    default: '.'
  toml:
    description: |
      pyproject.toml location.
      Default pyproject.toml
    default: 'pyproject.toml'
  python_version:
    description: |
      Python Version
      Default is '3.7'.
    default: '3.7'
  # Python Tooling
  black:
    description: |
      Run Black
      Default is false.
    default: false
  bandit:
    description: |
      Run Bandit
      Default is false.
    default: false
  pylint:
    description: |
      Run Pylint
      Default is false.
    default: false
  pyright:
    description: |
      Run Pyright
      Default is false.
    default: false
  flake8:
    description: |
      Run Flake8
      Default is false.
    default: false
  pytest:
    description: |
      Run tests with PyTest
      Default is false.
    default: false
  pypi_publish:
    description: |
      Publish to PyPi
      Default is false
    default: false
  # Advanced Settings
  args:
    description: |
      Customize which tests run with Pytest Markers
    default: ''
  pypi_repo:
    description: |
      PyPi Target. Use this to point to private or test locations.      
      Default testpypi
    default: 'pypi'
  pypi_password: 
    description: |
      Credentials for PyPi
    default: ''
  version_suffix:
    description: |
      Value to append to version in order to produce unique id for PyPi.
      Examples include: 
        '-rc {{ github.run_attempt }}'
        '-dev {{ github.run_attempt }}'
    default: ''
  github_token:
    description: 'GITHUB_TOKEN'
    default: '${{ github.token }}'
  workdir:
    description: 'Working directory relative to the root directory.'
    default: 'src'
  testdir:
    description: 'Test directory'
    default: 'tests'
  coverage:
    description: 'Flags for code coverage'
    default: true
  flags:
    description: 'Flags for code coverage'
    default: 'unittests'

  ### Flags for reviewdog ###
  level:
    description: 'Report level for reviewdog [info,warning,error]'
    default: 'error'
  reporter:
    description: 'Reporter of reviewdog command [github-pr-check,github-pr-review].'
    default: 'github-pr-check'
  filter_mode:
    description: |
      Filtering mode for the reviewdog command [added,diff_context,file,nofilter].
      Default is added.
    default: 'added'
  fail_on_error:
    description: |
      Exit code for reviewdog when errors are found [true,false]
      Default is `false`.
    default: 'false'
  reviewdog_flags:
    description: 'Additional reviewdog flags'
    default: ''
runs:
  using: "composite"
  steps:
    - if: ${{ inputs.black == 'true' }}
      uses: rickstaa/action-black@v1
      id: action_black
      with:
        black_args: "--config ${{ inputs.root }}/${{ inputs.toml }} ${{ inputs.root }}/${{ inputs.workdir }}"
    - if: steps.action_black.outputs.is_formatted == 'true'
      uses: reviewdog/action-suggester@v1
      with:
        tool_name: blackfmt
        fail_on_error: true

    - if: ${{ inputs.bandit  == 'true' }}
      uses: dciborow/action-bandit@0.0.2
      with:
        workdir: ${{ inputs.root }}

    - if: ${{ inputs.flake8  == 'true' }}
      run: |
        if [ $(cat pyproject.toml | grep "tool.flake8") ]; then
          python -m pip install --upgrade pip
          python -m pip install flake8-pyproject
        fi
      shell: bash

    - if: ${{ inputs.flake8  == 'true' }}
      uses: reviewdog/action-flake8@v3
      with:
        github_token: ${{ inputs.github_token }}
        workdir: ${{ inputs.root }}/${{ inputs.workdir }}

    - if: ${{ inputs.pylint == 'true' }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}
        cache: 'pip' # caching pip dependencies

    - if: ${{ inputs.pylint == 'true' }}
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install pylint
        cd "${{ inputs.root }}/${{ inputs.workdir }}"
        python -m flit install || python -m pip install .

    - if: ${{ inputs.pylint == 'true' }}
      uses: dciborow/action-pylint@0.1.1
      with:
        github_token: ${{ inputs.github_token }}
        workdir: ${{ inputs.root }}/${{ inputs.workdir }}

    - if: ${{ inputs.pyright == 'true' }}
      uses: jakebailey/pyright-action@v1.1.0
      with:
        working-directory: ${{ inputs.root }}/${{ inputs.workdir }}
        project: ${{ inputs.toml }}

    - if: ${{ inputs.pytest == 'true' || inputs.pypi_publish  == 'true' }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}
        cache: 'pip' # caching pip dependencies

    - if: ${{ inputs.pytest == 'true' }}
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-xdist pytest-cov flit requests_mock
        cd "${{ inputs.root }}/${{ inputs.workdir }}"
        python -m flit install || python -m pip install .
        python -m pytest '${{ inputs.args }}' ${{ inputs.testdir }}

    - if: ${{ inputs.pytest == 'true' && inputs.coverage == 'true' }}
      uses: codecov/codecov-action@v3 
      with:
        flags: ${{ inputs.flags }}

    - if: ${{ inputs.pypi_publish == 'true' }}
      shell: bash
      env:
        FLIT_USERNAME: __token__
        FLIT_PASSWORD: ${{ inputs.pypi_password }}
      run: |
        cd "${{ inputs.root }}"

        python -m pip install --upgrade pip
        python -m pip install flit
        
        sed -i -r 's/\"[0-9]\.[0-9]\.[0-9]+\"/&\"${{ inputs.version_suffix }}\"/g' src/*/__init__.py
        python -m flit publish $repository --repository ${{ inputs.pypi_repo }} --pypirc .pypirc

# Ref: https://haya14busa.github.io/github-action-brandings/
branding:
  icon: 'check'
  color: 'blue'
